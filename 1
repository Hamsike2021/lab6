%% OOP
classdef Equalizer < handle
    properties (Constant)
        freqArray = [31, 62, 125, 250, 500, 1000, 2000, 4000, 8000,16000]
    end
    properties (Access = public)
        gain = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    end
    properties (Access = protected)
        bBank = []
        initB = []
    end
    properties (GetAccess = public, SetAccess = protected)
        fs = 44100
        order = 64
    end
    methods
         function obj = Equalizer(order, fs)
             obj.order = order;
             obj.fs = fs;
         end
         function [signalOut, initB] =  Filtering(signal, bBank,gain, initB)
             b = sum(gain .* bBank, 1);
             [signalOut, initB] = filter(b, 1, signal, initB);
         end
         function bBank = CreateFilters (obj, freqArray, order, fs)
            N = length(freqArray);
            freqArrayNorm = freqArray/(fs/2);
            bBank = [];
            for i = 1:N
                if i == 1
                    mlow = [1, 1, 0, 0];
                    freqLow = [0, freqArrayNorm(1), 2*freqArrayNorm(1), 1];
                    bBank = [bBank; fir2(order, freqLow, mlow)];
            elseif i == N
                    mHigh = [0, 0, 1, 1];
                    freqHigh = [0, freqArrayNorm(end)/2, freqArrayNorm(end), 1];
                    bBank = [bBank; fir2(order, freqHigh, mHigh)];
                else
                    mBand = [0, 0, 1, 0, 0];
                    freqBand = [0, freqArrayNorm(i - 1), freqArrayNorm(i), freqArrayNorm(i + 1), 1];
                    bBank = [bBank; fir2(order, freqBand, mBand)];
                end
            end
            obj.bBank = bBank;
         end
    end
